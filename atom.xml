<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hello world!</title>
  
  <subtitle>you are not a child any longer</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-12-28T04:39:02.323Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>InnoDB Gap锁如何解决幻读？</title>
    <link href="http://example.com/2013/12/28/InnoDB%20gap%E9%94%81%E8%83%BD%E5%A4%9F%E8%A7%A3%E5%86%B3%E5%B9%BB%E8%AF%BB%E5%90%97%EF%BC%9F/"/>
    <id>http://example.com/2013/12/28/InnoDB%20gap%E9%94%81%E8%83%BD%E5%A4%9F%E8%A7%A3%E5%86%B3%E5%B9%BB%E8%AF%BB%E5%90%97%EF%BC%9F/</id>
    <published>2013-12-28T14:04:53.000Z</published>
    <updated>2023-12-28T04:39:02.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Gap锁是什么？"><a href="#1-Gap锁是什么？" class="headerlink" title="1. Gap锁是什么？"></a>1. Gap锁是什么？</h2><p>ANSI SQL-92根据现象定义了隔离界别，这三种phenomena分别是脏读，不可重复读，和幻读。四种隔离级别分别是1）READ UNCOMMITTED，2）READ COMMITTED，3）REPEATABLE READ，4）SERIALIZABLE。在现代数据库设计中通过2PL和MVCC的结合可以很容易解决脏读和不重复读的问题。实际上在PG中幻读也是通过2PL和MVCC解决的，但是否能够完全解决了，本文不做过多探讨。</p><p>回到InnoDB，他在设计上并没有严格遵照隔离级别的要求来设计。InnoDB的只读操作采用快照读，读写操作采用的当前读，当前读可以理解为读已提交的数据。因此要实现RR的隔离级别，仅采用行锁是无法解决幻读的。例如下面这样简单的带有主键表的插入场景，如果只有行锁，T1事务在执行update时会lock record 15，此时进来T2插入record 11和16成功插入并提交，紧接着T1继续执行相同条件的update，不应该被看到的record 11和16也会被更新掉！这种情况数据一致性就无法保障。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tt(a <span class="type">int</span> <span class="keyword">primary</span> key, b <span class="type">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tt <span class="keyword">values</span>(<span class="number">3</span>,<span class="number">300</span>),(<span class="number">4</span>,<span class="number">400</span>),(<span class="number">5</span>,<span class="number">500</span>),(<span class="number">10</span>,<span class="number">1000</span>),(<span class="number">15</span>,<span class="number">1500</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>T1</th><th>T2</th></tr></thead><tbody><tr><td>begin;</td><td></td></tr><tr><td>update tt set b&#x3D;b-100 where a&gt;10;</td><td></td></tr><tr><td></td><td>begin;</td></tr><tr><td></td><td>insert into tt values(11,1100)；ok</td></tr><tr><td></td><td>insert into tt values(16,1600);  ok</td></tr><tr><td></td><td>commit;</td></tr><tr><td>update tt set b&#x3D;b-200 where a&gt;10;</td><td></td></tr></tbody></table><p>InnoDB给出的解决方案就是在RR隔离级别下引入一种锁协议——Gap锁。简单的说就是所有的记录上的显式加锁（无论手动还是自动，无论是s锁还是x锁）都自带了buff，会锁定当前记录以及其前面的间隙，在InnoDB种也称作next-lock。</p><p>再次重申，Gap协议是为了解决幻读的，不会出现幻读的场景当然也就没必要引入Gap语义，例如如果是唯一键点查，那只需要锁定对应的一条记录即可。在InnoDB RR隔离级别下，这种锁称为REC_NOT_GAP锁。但是如果是一个二级索引点查，那可能就需要锁定某些gap但是不包括记录本身，在InnoDB RR隔离级别下这种锁为gap锁。下一节通过几个具体案例简要说明。</p><h2 id="2-RR隔离界别锁场景"><a href="#2-RR隔离界别锁场景" class="headerlink" title="2. RR隔离界别锁场景"></a>2. RR隔离界别锁场景</h2><h3 id="场景1：主表无索引删除锁全表"><a href="#场景1：主表无索引删除锁全表" class="headerlink" title="场景1：主表无索引删除锁全表"></a>场景1：主表无索引删除锁全表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t (a <span class="type">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span> (<span class="number">21</span>),(<span class="number">25</span>),(<span class="number">25</span>),(<span class="number">30</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>T1</th><th>T2</th></tr></thead><tbody><tr><td>begin;</td><td></td></tr><tr><td>select * from t; (快照读)</td><td></td></tr><tr><td>delete from t where a &#x3D; 25;</td><td>begin;</td></tr><tr><td></td><td>insert into t values (25);（阻塞）</td></tr><tr><td></td><td>insert into t values (10);（阻塞）</td></tr><tr><td></td><td>insert into t values (50);（阻塞）</td></tr><tr><td></td><td>delete from t where a&#x3D;21;（阻塞）</td></tr><tr><td></td><td>delete from t where a&#x3D;30; （阻塞）</td></tr><tr><td>commit;</td><td></td></tr><tr><td></td><td>commit;</td></tr></tbody></table><p><img src="https://github.com/hanke1995/image_store/blob/main/gap_locks/image-1.png?raw=true" alt="image-1.png"></p><p>无索引表任何查询都会遍历全表，并对所有记录加显示锁，即上图中的每个x锁定记录本身和记录之前的gap，例如记录25上的x锁锁定(21,25]区间。导致T2的所有插入操作被阻塞。</p><h3 id="场景2：-非唯一索引"><a href="#场景2：-非唯一索引" class="headerlink" title="场景2： 非唯一索引"></a>场景2： 非唯一索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> inx(a <span class="type">int</span>, b <span class="type">int</span>, index norinx(a));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> inx <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">100</span>), (<span class="number">1</span>,<span class="number">200</span>),(<span class="number">2</span>,<span class="number">300</span>),(<span class="number">2</span>,<span class="number">400</span>),(<span class="number">10</span>,<span class="number">500</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>T1</th><th>T2</th></tr></thead><tbody><tr><td>begin;</td><td></td></tr><tr><td>update inx force index(norinx) set b&#x3D;b+10 where a&#x3D;2; (二级索引表上，a&#x3D;2 key加 next-lock锁，10加gap锁)</td><td></td></tr><tr><td></td><td>begin;</td></tr><tr><td></td><td>insert into inx values(3,600); (阻塞)</td></tr><tr><td></td><td>update inx set b&#x3D;b-10 where a&#x3D;10;</td></tr><tr><td></td><td>update inx set b&#x3D;b-10 where a&#x3D;1;</td></tr><tr><td>commit;</td><td>insert into inx values(1,600); （阻塞）</td></tr><tr><td></td><td>delete from inx where a&#x3D;1;</td></tr><tr><td></td><td>insert into inx values(10,600);</td></tr><tr><td></td><td>commit;</td></tr></tbody></table><p><img src="https://github.com/hanke1995/image_store/blob/main/gap_locks/image-2.png?raw=true" alt="image-2.png"></p><p>非唯一索引因为索引非唯一，所以记录的前后都有可能插入数据，因此除了在记录本身上加显示锁外，还需要在下个记录上设置间隙位，表明只锁定记录之前的gap，不锁定记录本身，如上索引key 10。</p><h3 id="场景3：-唯一索引"><a href="#场景3：-唯一索引" class="headerlink" title="场景3： 唯一索引"></a>场景3： 唯一索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> uni(a <span class="type">int</span>, b <span class="type">int</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index unidx <span class="keyword">on</span> uni(a);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> uni <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">100</span>), (<span class="number">2</span>,<span class="number">200</span>),(<span class="number">3</span>,<span class="number">300</span>),(<span class="number">4</span>,<span class="number">400</span>),(<span class="number">10</span>,<span class="number">500</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>T1</th><th>T2</th></tr></thead><tbody><tr><td>begin;</td><td></td></tr><tr><td>update uni force index(unidx) set b&#x3D;b+10 where a&#x3D;2;</td><td></td></tr><tr><td>唯一索引点查只锁记录</td><td></td></tr><tr><td></td><td>begin;</td></tr><tr><td></td><td>insert into uni values(5,600);</td></tr><tr><td>commit;</td><td></td></tr></tbody></table><p><img src="https://github.com/hanke1995/image_store/blob/main/gap_locks/image-3.png?raw=true" alt="image-3.png"></p><h3 id="场景4：-主键范围锁"><a href="#场景4：-主键范围锁" class="headerlink" title="场景4： 主键范围锁"></a>场景4： 主键范围锁</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tt(a <span class="type">int</span> <span class="keyword">primary</span> key, b <span class="type">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tt <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">100</span>), (<span class="number">2</span>,<span class="number">200</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tt <span class="keyword">values</span>(<span class="number">3</span>,<span class="number">300</span>),(<span class="number">4</span>,<span class="number">400</span>),(<span class="number">5</span>,<span class="number">500</span>),(<span class="number">10</span>,<span class="number">1000</span>),(<span class="number">15</span>,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>T1</th><th>T2</th></tr></thead><tbody><tr><td>begin;</td><td></td></tr><tr><td>update tt set b&#x3D;b-100 where a&gt;10;</td><td></td></tr><tr><td></td><td>begin;</td></tr><tr><td></td><td>insert into tt values(6,600)；ok</td></tr><tr><td>commit</td><td>insert into tt values(11,600); 阻塞</td></tr><tr><td></td><td>commit;</td></tr></tbody></table><p><img src="https://github.com/hanke1995/image_store/blob/main/gap_locks/image-4.png?raw=true" alt="image-4.png"></p><h3 id="场景5：-主键索引-非唯一索引"><a href="#场景5：-主键索引-非唯一索引" class="headerlink" title="场景5： 主键索引+非唯一索引"></a>场景5： 主键索引+非唯一索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> pri_nor(a <span class="type">int</span> <span class="keyword">primary</span> key, b <span class="type">int</span>, c <span class="type">int</span>, index norinx(b));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> pri_nor <span class="keyword">values</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">100</span>), (<span class="number">2</span> ,<span class="number">1</span>, <span class="number">200</span>), (<span class="number">3</span>, <span class="number">5</span> , <span class="number">300</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">400</span>), (<span class="number">5</span>, <span class="number">15</span>, <span class="number">500</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>T1</th><th>T2</th></tr></thead><tbody><tr><td>begin;</td><td></td></tr><tr><td>update pri_nor force index(norinx) set c&#x3D;c+10 where b&#x3D;1;</td><td></td></tr><tr><td></td><td>begin;</td></tr><tr><td></td><td>insert into pri_nor values(6, 6, 600); (无阻塞)</td></tr><tr><td></td><td>insert into pri_nor values(6, 2, 600); &#x2F;&#x2F;阻塞区间[1,5)</td></tr></tbody></table><p><img src="https://github.com/hanke1995/image_store/blob/main/gap_locks/image-5.png?raw=true" alt="image-5.png"></p><h3 id="场景6-主键索引-唯一索引"><a href="#场景6-主键索引-唯一索引" class="headerlink" title="场景6: 主键索引+唯一索引"></a>场景6: 主键索引+唯一索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> pri_uni(a <span class="type">int</span> <span class="keyword">primary</span> key, b <span class="type">int</span>, c <span class="type">int</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index unidx <span class="keyword">on</span> pri_uni(b);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> pri_uni <span class="keyword">values</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">100</span>), (<span class="number">2</span> ,<span class="number">2</span>, <span class="number">200</span>), (<span class="number">5</span>, <span class="number">5</span> , <span class="number">300</span>), (<span class="number">10</span>, <span class="number">10</span>, <span class="number">400</span>), (<span class="number">15</span>, <span class="number">15</span>, <span class="number">500</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>T1</th><th>T2</th></tr></thead><tbody><tr><td>begin;</td><td></td></tr><tr><td>update pri_uni force index(unidx) set c&#x3D;c+10 where b&#x3D;2;</td><td></td></tr><tr><td>update pri_uni force index(unidx) set c&#x3D;c+10 where b&#x3D;5;</td><td>begin;</td></tr><tr><td></td><td>insert into pri_uni values(3,3,300);</td></tr><tr><td></td><td></td></tr></tbody></table><p><img src="https://github.com/hanke1995/image_store/blob/main/gap_locks/image-6.png?raw=true" alt="image-6.png"></p><p>如果只是走主键索引，不会对二级索引加锁。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> pri_uni force index(PRI) <span class="keyword">set</span> c<span class="operator">=</span>c<span class="operator">+</span><span class="number">10</span> <span class="keyword">where</span> a<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/hanke1995/image_store/blob/main/gap_locks/image-7.png?raw=true" alt="image-7.png"></p><h2 id="3-GAP锁能够完全避免幻读吗？"><a href="#3-GAP锁能够完全避免幻读吗？" class="headerlink" title="3. GAP锁能够完全避免幻读吗？"></a>3. GAP锁能够完全避免幻读吗？</h2><h3 id="RR隔离级别仍然幻读？"><a href="#RR隔离级别仍然幻读？" class="headerlink" title="RR隔离级别仍然幻读？"></a>RR隔离级别仍然幻读？</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t (a <span class="type">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span> (<span class="number">21</span>),(<span class="number">25</span>),(<span class="number">25</span>),(<span class="number">30</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>T1</th><th>T2</th></tr></thead><tbody><tr><td>begin;</td><td></td></tr><tr><td>select * from t; (快照读)</td><td></td></tr><tr><td></td><td>begin;</td></tr><tr><td></td><td>insert into t values (25);</td></tr><tr><td>delete from t where a &#x3D; 25; (阻塞)</td><td></td></tr><tr><td></td><td>commit;</td></tr><tr><td>commit;</td><td></td></tr></tbody></table><p><img src="https://github.com/hanke1995/image_store/blob/main/gap_locks/image-8.png?raw=true" alt="image-8.png"></p><p><img src="https://github.com/hanke1995/image_store/blob/main/gap_locks/image-9.png?raw=true" alt="image-9.png"></p><p>上面一个例子结果看T1最后删除了3条记录，但是理论上T1应该只删除2条记录。同样的案例在PG中只会删除两条记录，pg的读写事务也使用快照读的方式，保证了语义的正确性。因此innodb的repeatable read并没有真正意义上实现可重复读，仅仅是只读操作使用快照读方式解决non-repeatable read问题。而写操作则采用的read commit的隔离界别，没有避免幻读的问题。</p><p>在上例中innodb认为T1事务的真正开始时间是从只读事务转读写事务开始。hmm，其实这么解释也有点牵强，毕竟innodb_trx统计的事务开始时间也包括只读事务。</p><p><img src="https://github.com/hanke1995/image_store/blob/main/gap_locks/image-10.png?raw=true" alt="image-10.png"></p><h3 id="innodb-RR可序列化更新，但是违背了可重复读语义"><a href="#innodb-RR可序列化更新，但是违背了可重复读语义" class="headerlink" title="innodb RR可序列化更新，但是违背了可重复读语义"></a>innodb RR可序列化更新，但是违背了可重复读语义</h3><p>对同一行数据更新的场景肯定不能使用多版本，否则会更新丢失。事务开始时间不同，按照可重复读的语义，两个事务的修改对方是看不到的，所以对同一行数据的更新是不可序列化的。不可序列化应该失败掉。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tt(a <span class="type">int</span> <span class="keyword">primary</span> key, <span class="type">int</span> b);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tt <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">100</span>), (<span class="number">2</span>,<span class="number">200</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>T1</th><th>T2</th></tr></thead><tbody><tr><td>begin;</td><td></td></tr><tr><td>update tt set b&#x3D;b-10 where a &#x3D; 1;</td><td></td></tr><tr><td></td><td>begin;</td></tr><tr><td></td><td>update tt set b&#x3D;b+20 where a&#x3D;1; （阻塞）</td></tr><tr><td>commit</td><td></td></tr><tr><td></td><td>commit;</td></tr></tbody></table><p>如果此时更新使用快照读，像场景一一样，势必会出现更新丢失的问题，t1和t2读到同一时刻的b，但是结果却只体现了一个事务的操作。因此PG中将这种行为定义为不可串行化的语义，报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: could not serialize access due to concurrent update</span><br></pre></td></tr></table></figure><table><thead><tr><th>T1</th><th>T2</th></tr></thead><tbody><tr><td>begin;</td><td></td></tr><tr><td>update tt set b&#x3D;b-10 where a &#x3D; 1;</td><td></td></tr><tr><td></td><td>begin;</td></tr><tr><td></td><td>update tt set b&#x3D;b+20 where a&#x3D;1; （阻塞）</td></tr><tr><td>commit；</td><td>ERROR: could not serialize access due to concurrent update</td></tr><tr><td></td><td>update tt set b&#x3D;b+20 where a&#x3D;1;  （重试）</td></tr><tr><td></td><td>ERROR:  current transaction is aborted, commands ignored until end of transaction block</td></tr><tr><td></td><td>rollback；此时必须回滚事务</td></tr></tbody></table><p>而innodb则使用的是锁等待方式，以保证串行化执行，当然也违背了可重复读的语义。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Gap锁是什么？&quot;&gt;&lt;a href=&quot;#1-Gap锁是什么？&quot; class=&quot;headerlink&quot; title=&quot;1. Gap锁是什么？&quot;&gt;&lt;/a&gt;1. Gap锁是什么？&lt;/h2&gt;&lt;p&gt;ANSI SQL-92根据现象定义了隔离界别，这三种phenomena分</summary>
      
    
    
    
    
  </entry>
  
</feed>
